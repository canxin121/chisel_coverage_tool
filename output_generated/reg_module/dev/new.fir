FIRRTL version 3.3.0
circuit RegModule :
  module RegModule : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 6:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 6:7]
    input reset : UInt<1> @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 6:7]
    output io : { flip sel : UInt<1>, out : UInt<8>[3][2]} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 7:14]
    output _cond_pred : { RegModule__I__local__I___T : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 6:7]
    output _reg_signals : { RegModule__I__local__I__regA : UInt<8>[3][2], RegModule__I__local__I__regB : UInt<8>[3][2]} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 6:7]

    wire _reg_prop_wire_RegModule__I__local__I__regA : UInt<8>[3][2]
    wire _reg_prop_wire_RegModule__I__local__I__regB : UInt<8>[3][2]
    invalidate _reg_prop_wire_RegModule__I__local__I__regA
    invalidate _reg_prop_wire_RegModule__I__local__I__regB
    node _T = eq(io.sel, UInt<1>(0h0)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 13:15]
    when _T : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 13:24]
      wire _regA_WIRE : UInt<8>[3] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE[0], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE[1], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE[2], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      wire _regA_WIRE_1 : UInt<8>[3] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE_1[0], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE_1[1], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      connect _regA_WIRE_1[2], UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:55]
      wire _regA_WIRE_2 : UInt<8>[3][2] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:39]
      connect _regA_WIRE_2[0], _regA_WIRE @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:39]
      connect _regA_WIRE_2[1], _regA_WIRE_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:39]
      regreset regA : UInt<8>[3][2], clock, reset, _regA_WIRE_2 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:23]
      connect _reg_prop_wire_RegModule__I__local__I__regA, regA @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 15:23]
      node _regA_0_0_T = add(regA[0][0], UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 17:30]
      node _regA_0_0_T_1 = tail(_regA_0_0_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 17:30]
      connect regA[0][0], _regA_0_0_T_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 17:16]
      connect io.out, regA @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 18:12]
    else :
      wire _regB_WIRE : UInt<8>[3] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE[0], UInt<8>(0h64) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE[1], UInt<8>(0h65) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE[2], UInt<8>(0h66) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      wire _regB_WIRE_1 : UInt<8>[3] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE_1[0], UInt<8>(0h6e) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE_1[1], UInt<8>(0h6f) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      connect _regB_WIRE_1[2], UInt<8>(0h70) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 24:16]
      wire _regB_WIRE_2 : UInt<8>[3][2] @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 23:14]
      connect _regB_WIRE_2[0], _regB_WIRE @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 23:14]
      connect _regB_WIRE_2[1], _regB_WIRE_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 23:14]
      regreset regB : UInt<8>[3][2], clock, reset, _regB_WIRE_2 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 22:23]
      connect _reg_prop_wire_RegModule__I__local__I__regB, regB @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 22:23]
      node _regB_1_2_T = sub(regB[1][2], UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 28:30]
      node _regB_1_2_T_1 = tail(_regB_1_2_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 28:30]
      connect regB[1][2], _regB_1_2_T_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 28:16]
      connect io.out, regB @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Reg.scala 29:12]
    connect _cond_pred.RegModule__I__local__I___T, _T
    connect _reg_signals.RegModule__I__local__I__regA, _reg_prop_wire_RegModule__I__local__I__regA
    connect _reg_signals.RegModule__I__local__I__regB, _reg_prop_wire_RegModule__I__local__I__regB
