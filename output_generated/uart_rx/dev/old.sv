// Generated by CIRCT firtool-1.62.1
module UART_rx(
  input        clock,
               reset,
               io_i_serial_data,
  output       io_o_rx_done,
  output [7:0] io_o_data
);

  reg [8:0] clkCnterReg;
  reg [3:0] bitCnterReg;
  reg       outDataReg_0;
  reg       outDataReg_1;
  reg       outDataReg_2;
  reg       outDataReg_3;
  reg       outDataReg_4;
  reg       outDataReg_5;
  reg       outDataReg_6;
  reg       outDataReg_7;
  reg       outRxDoneReg;
  reg [1:0] stateReg;
  reg       serialDataReg_REG;
  reg       serialDataReg;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 9'h0;
      bitCnterReg <= 4'h0;
      outDataReg_0 <= 1'h0;
      outDataReg_1 <= 1'h0;
      outDataReg_2 <= 1'h0;
      outDataReg_3 <= 1'h0;
      outDataReg_4 <= 1'h0;
      outDataReg_5 <= 1'h0;
      outDataReg_6 <= 1'h0;
      outDataReg_7 <= 1'h0;
      outRxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      automatic logic            _GEN = stateReg == 2'h0;
      automatic logic            _GEN_0;
      automatic logic            _GEN_1 = clkCnterReg < 9'h45;
      automatic logic            _GEN_2;
      automatic logic            _GEN_3;
      automatic logic            _GEN_4;
      automatic logic [3:0][8:0] _GEN_5;
      automatic logic [3:0][1:0] _GEN_6;
      _GEN_0 = stateReg == 2'h1;
      _GEN_2 = stateReg == 2'h2;
      _GEN_3 = clkCnterReg < 9'h8A;
      _GEN_4 = _GEN | _GEN_0;
      _GEN_5 =
        {{_GEN_3 ? clkCnterReg + 9'h1 : 9'h0},
         {_GEN_3 ? clkCnterReg + 9'h1 : 9'h0},
         {_GEN_1 ? clkCnterReg + 9'h1 : 9'h0},
         {9'h0}};
      clkCnterReg <= _GEN_5[stateReg];
      if (_GEN)
        bitCnterReg <= 4'h0;
      else if (_GEN_0 | ~_GEN_2 | _GEN_3) begin
      end
      else if (bitCnterReg[3])
        bitCnterReg <= 4'h0;
      else
        bitCnterReg <= bitCnterReg + 4'h1;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | (|(bitCnterReg[2:0]))) begin
      end
      else
        outDataReg_0 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h1) begin
      end
      else
        outDataReg_1 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h2) begin
      end
      else
        outDataReg_2 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h3) begin
      end
      else
        outDataReg_3 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h4) begin
      end
      else
        outDataReg_4 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h5) begin
      end
      else
        outDataReg_5 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h6) begin
      end
      else
        outDataReg_6 <= serialDataReg;
      if (_GEN_4 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h7) begin
      end
      else
        outDataReg_7 <= serialDataReg;
      outRxDoneReg <= ~_GEN & (~(_GEN_0 | _GEN_2) & (&stateReg) & ~_GEN_3 | outRxDoneReg);
      _GEN_6 =
        {{{2{_GEN_3}}},
         {{1'h1, bitCnterReg == 4'h8}},
         {_GEN_1 ? 2'h1 : {~serialDataReg, 1'h0}},
         {{1'h0, ~serialDataReg}}};
      stateReg <= _GEN_6[stateReg];
    end
    serialDataReg_REG <= io_i_serial_data;
    serialDataReg <= serialDataReg_REG;
  end // always @(posedge)
  assign io_o_rx_done = outRxDoneReg;
  assign io_o_data =
    {outDataReg_7,
     outDataReg_6,
     outDataReg_5,
     outDataReg_4,
     outDataReg_3,
     outDataReg_2,
     outDataReg_1,
     outDataReg_0};
endmodule

