// Generated by CIRCT firtool-1.51.0
module UART_rx(
  input        clock,
               reset,
               io_i_serial_data,
  output       io_o_rx_done,
  output [7:0] io_o_data,
  output       _cond_pred_UART_rx__M__UART_rx__S___T,
               _cond_pred_UART_rx__M__UART_rx__S___T_1,
               _cond_pred_UART_rx__M__UART_rx__S___T_10,
               _cond_pred_UART_rx__M__UART_rx__S___T_11,
               _cond_pred_UART_rx__M__UART_rx__S___T_2,
               _cond_pred_UART_rx__M__UART_rx__S___T_3,
               _cond_pred_UART_rx__M__UART_rx__S___T_4,
               _cond_pred_UART_rx__M__UART_rx__S___T_5,
               _cond_pred_UART_rx__M__UART_rx__S___T_6,
               _cond_pred_UART_rx__M__UART_rx__S___T_8,
               _cond_pred_UART_rx__M__UART_rx__S___T_9,
  output [3:0] _reg_signals_UART_rx__M__UART_rx__S__bitCnterReg,
  output [8:0] _reg_signals_UART_rx__M__UART_rx__S__clkCnterReg,
  output       _reg_signals_UART_rx__M__UART_rx__S__outDataReg_0,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_1,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_2,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_3,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_4,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_5,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_6,
               _reg_signals_UART_rx__M__UART_rx__S__outDataReg_7,
               _reg_signals_UART_rx__M__UART_rx__S__outRxDoneReg,
               _reg_signals_UART_rx__M__UART_rx__S__serialDataReg,
               _reg_signals_UART_rx__M__UART_rx__S__serialDataReg_REG,
  output [1:0] _reg_signals_UART_rx__M__UART_rx__S__stateReg
);

  reg  [8:0] clkCnterReg;
  reg  [3:0] bitCnterReg;
  reg        outDataReg_0;
  reg        outDataReg_1;
  reg        outDataReg_2;
  reg        outDataReg_3;
  reg        outDataReg_4;
  reg        outDataReg_5;
  reg        outDataReg_6;
  reg        outDataReg_7;
  reg        outRxDoneReg;
  reg  [1:0] stateReg;
  reg        serialDataReg_REG;
  reg        serialDataReg;
  wire       _GEN = stateReg == 2'h0;
  wire       _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_2 = stateReg == 2'h1;
  wire       _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_3 = clkCnterReg < 9'h45;
  wire       _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5 = stateReg == 2'h2;
  wire       _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11 = clkCnterReg < 9'h8A;
  wire       _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_9 = bitCnterReg == 4'h8;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 9'h0;
      bitCnterReg <= 4'h0;
      outDataReg_0 <= 1'h0;
      outDataReg_1 <= 1'h0;
      outDataReg_2 <= 1'h0;
      outDataReg_3 <= 1'h0;
      outDataReg_4 <= 1'h0;
      outDataReg_5 <= 1'h0;
      outDataReg_6 <= 1'h0;
      outDataReg_7 <= 1'h0;
      outRxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      automatic logic            _GEN_0 =
        _GEN | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_2;
      automatic logic [3:0][8:0] _GEN_1 =
        {{_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11 ? clkCnterReg + 9'h1 : 9'h0},
         {_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11 ? clkCnterReg + 9'h1 : 9'h0},
         {_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_3 ? clkCnterReg + 9'h1 : 9'h0},
         {9'h0}};
      automatic logic [3:0][1:0] _GEN_2 =
        {{{2{_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11}}},
         {{1'h1, _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_9}},
         {_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_3
            ? 2'h1
            : {~serialDataReg, 1'h0}},
         {{1'h0, ~serialDataReg}}};
      clkCnterReg <= _GEN_1[stateReg];
      if (_GEN)
        bitCnterReg <= 4'h0;
      else if (_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_2
               | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
               | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11) begin
      end
      else if (bitCnterReg[3])
        bitCnterReg <= 4'h0;
      else
        bitCnterReg <= bitCnterReg + 4'h1;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | (|(bitCnterReg[2:0]))) begin
      end
      else
        outDataReg_0 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h1) begin
      end
      else
        outDataReg_1 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h2) begin
      end
      else
        outDataReg_2 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h3) begin
      end
      else
        outDataReg_3 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h4) begin
      end
      else
        outDataReg_4 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h5) begin
      end
      else
        outDataReg_5 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h6) begin
      end
      else
        outDataReg_6 <= serialDataReg;
      if (_GEN_0 | ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5
          | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11
          | bitCnterReg[2:0] != 3'h7) begin
      end
      else
        outDataReg_7 <= serialDataReg;
      outRxDoneReg <=
        ~_GEN
        & (~(_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_2
             | _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5) & (&stateReg)
           & ~_cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11 | outRxDoneReg);
      stateReg <= _GEN_2[stateReg];
    end
    serialDataReg_REG <= io_i_serial_data;
    serialDataReg <= serialDataReg_REG;
  end // always @(posedge)
  assign io_o_rx_done = outRxDoneReg;
  assign io_o_data =
    {outDataReg_7,
     outDataReg_6,
     outDataReg_5,
     outDataReg_4,
     outDataReg_3,
     outDataReg_2,
     outDataReg_1,
     outDataReg_0};
  assign _cond_pred_UART_rx__M__UART_rx__S___T = _GEN;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_1 = ~serialDataReg;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_10 = &stateReg;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_11 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_2 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_2;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_3 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_3;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_4 = ~serialDataReg;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_5 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_5;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_6 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_11;
  assign _cond_pred_UART_rx__M__UART_rx__S___T_8 = ~(bitCnterReg[3]);
  assign _cond_pred_UART_rx__M__UART_rx__S___T_9 =
    _cond_pred_prop_wire_UART_rx__M__UART_rx__S___T_9;
  assign _reg_signals_UART_rx__M__UART_rx__S__bitCnterReg = bitCnterReg;
  assign _reg_signals_UART_rx__M__UART_rx__S__clkCnterReg = clkCnterReg;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_0 = outDataReg_0;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_1 = outDataReg_1;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_2 = outDataReg_2;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_3 = outDataReg_3;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_4 = outDataReg_4;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_5 = outDataReg_5;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_6 = outDataReg_6;
  assign _reg_signals_UART_rx__M__UART_rx__S__outDataReg_7 = outDataReg_7;
  assign _reg_signals_UART_rx__M__UART_rx__S__outRxDoneReg = outRxDoneReg;
  assign _reg_signals_UART_rx__M__UART_rx__S__serialDataReg = serialDataReg;
  assign _reg_signals_UART_rx__M__UART_rx__S__serialDataReg_REG = serialDataReg_REG;
  assign _reg_signals_UART_rx__M__UART_rx__S__stateReg = stateReg;
endmodule

