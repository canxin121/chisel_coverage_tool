// Generated by CIRCT firtool-1.43.0
module UART_rx(
  input        clock,
               reset,
               io_i_serial_data,
  output       io_o_rx_done,
  output [7:0] io_o_data,
  output       _cp__s0,
               _cp__s1,
               _cp__s10,
               _cp__s2,
               _cp__s3,
               _cp__s4,
               _cp__s5,
               _cp__s6,
               _cp__s7,
               _cp__s8,
               _cp__s9,
  output [8:0] _rs__s0,
  output [3:0] _rs__s1,
  output       _rs__s10,
  output [1:0] _rs__s11,
  output       _rs__s12,
               _rs__s13,
               _rs__s2,
               _rs__s3,
               _rs__s4,
               _rs__s5,
               _rs__s6,
               _rs__s7,
               _rs__s8,
               _rs__s9
);

  reg  [8:0] clkCnterReg;
  reg  [3:0] bitCnterReg;
  reg        outDataReg_0;
  reg        outDataReg_1;
  reg        outDataReg_2;
  reg        outDataReg_3;
  reg        outDataReg_4;
  reg        outDataReg_5;
  reg        outDataReg_6;
  reg        outDataReg_7;
  reg        outRxDoneReg;
  reg  [1:0] stateReg;
  reg        serialDataReg_REG;
  reg        serialDataReg;
  wire       _GEN = stateReg == 2'h0;
  wire       _GEN_0 = stateReg == 2'h1;
  wire       _GEN_1 = clkCnterReg < 9'h45;
  wire       _GEN_2 = stateReg == 2'h2;
  wire       _GEN_3 = clkCnterReg < 9'h8A;
  wire       _GEN_4 = bitCnterReg == 4'h8;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 9'h0;
      bitCnterReg <= 4'h0;
      outDataReg_0 <= 1'h0;
      outDataReg_1 <= 1'h0;
      outDataReg_2 <= 1'h0;
      outDataReg_3 <= 1'h0;
      outDataReg_4 <= 1'h0;
      outDataReg_5 <= 1'h0;
      outDataReg_6 <= 1'h0;
      outDataReg_7 <= 1'h0;
      outRxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      automatic logic [8:0]      _GEN_5 = clkCnterReg + 9'h1;
      automatic logic [8:0]      _GEN_6 = _GEN_3 ? _GEN_5 : 9'h0;
      automatic logic            _GEN_7 = _GEN | _GEN_0;
      automatic logic [3:0][8:0] _GEN_8 =
        {{_GEN_6}, {_GEN_6}, {_GEN_1 ? _GEN_5 : 9'h0}, {9'h0}};
      automatic logic [3:0][1:0] _GEN_9 =
        {{{2{_GEN_3}}},
         {{1'h1, _GEN_4}},
         {_GEN_1 ? 2'h1 : {~serialDataReg, 1'h0}},
         {{1'h0, ~serialDataReg}}};
      clkCnterReg <= _GEN_8[stateReg];
      if (_GEN)
        bitCnterReg <= 4'h0;
      else if (_GEN_0 | ~_GEN_2 | _GEN_3) begin
      end
      else if (bitCnterReg[3])
        bitCnterReg <= 4'h0;
      else
        bitCnterReg <= bitCnterReg + 4'h1;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | (|(bitCnterReg[2:0]))) begin
      end
      else
        outDataReg_0 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h1) begin
      end
      else
        outDataReg_1 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h2) begin
      end
      else
        outDataReg_2 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h3) begin
      end
      else
        outDataReg_3 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h4) begin
      end
      else
        outDataReg_4 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h5) begin
      end
      else
        outDataReg_5 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h6) begin
      end
      else
        outDataReg_6 <= serialDataReg;
      if (_GEN_7 | ~_GEN_2 | _GEN_3 | bitCnterReg[2:0] != 3'h7) begin
      end
      else
        outDataReg_7 <= serialDataReg;
      outRxDoneReg <= ~_GEN & (~(_GEN_0 | _GEN_2) & (&stateReg) & ~_GEN_3 | outRxDoneReg);
      stateReg <= _GEN_9[stateReg];
    end
    serialDataReg_REG <= io_i_serial_data;
    serialDataReg <= serialDataReg_REG;
  end // always @(posedge)
  assign io_o_rx_done = outRxDoneReg;
  assign io_o_data =
    {outDataReg_7,
     outDataReg_6,
     outDataReg_5,
     outDataReg_4,
     outDataReg_3,
     outDataReg_2,
     outDataReg_1,
     outDataReg_0};
  assign _cp__s0 = _GEN;
  assign _cp__s1 = ~serialDataReg;
  assign _cp__s10 = _GEN_3;
  assign _cp__s2 = _GEN_0;
  assign _cp__s3 = _GEN_1;
  assign _cp__s4 = ~serialDataReg;
  assign _cp__s5 = _GEN_2;
  assign _cp__s6 = _GEN_3;
  assign _cp__s7 = ~(bitCnterReg[3]);
  assign _cp__s8 = _GEN_4;
  assign _cp__s9 = &stateReg;
  assign _rs__s0 = clkCnterReg;
  assign _rs__s1 = bitCnterReg;
  assign _rs__s10 = outRxDoneReg;
  assign _rs__s11 = stateReg;
  assign _rs__s12 = serialDataReg_REG;
  assign _rs__s13 = serialDataReg;
  assign _rs__s2 = outDataReg_0;
  assign _rs__s3 = outDataReg_1;
  assign _rs__s4 = outDataReg_2;
  assign _rs__s5 = outDataReg_3;
  assign _rs__s6 = outDataReg_4;
  assign _rs__s7 = outDataReg_5;
  assign _rs__s8 = outDataReg_6;
  assign _rs__s9 = outDataReg_7;
endmodule

