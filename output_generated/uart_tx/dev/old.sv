// Generated by CIRCT firtool-1.51.0
module UART_tx(
  input        clock,
               reset,
               io_i_tx_trig,
  input  [7:0] io_i_data,
  output       io_o_tx_busy,
               io_o_tx_done,
               io_o_serial_data
);

  reg [7:0] clkCnterReg;
  reg [3:0] bitCnterReg;
  reg [7:0] inDataReg;
  reg       outDataReg;
  reg       outTxBusyReg;
  reg       outTxDoneReg;
  reg [1:0] stateReg;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 8'h0;
      bitCnterReg <= 4'h0;
      inDataReg <= 8'h0;
      outDataReg <= 1'h1;
      outTxBusyReg <= 1'h0;
      outTxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      automatic logic            _GEN = stateReg == 2'h0;
      automatic logic            _GEN_0;
      automatic logic            _GEN_1;
      automatic logic            _GEN_2;
      automatic logic [3:0][7:0] _GEN_3;
      automatic logic [3:0][1:0] _GEN_4;
      _GEN_0 = stateReg == 2'h1;
      _GEN_1 = clkCnterReg < 8'h56;
      _GEN_2 = stateReg == 2'h2;
      _GEN_3 =
        {{_GEN_1 ? clkCnterReg + 8'h1 : 8'h0},
         {_GEN_1 ? clkCnterReg + 8'h1 : 8'h0},
         {_GEN_1 ? clkCnterReg + 8'h1 : 8'h0},
         {8'h0}};
      clkCnterReg <= _GEN_3[stateReg];
      if (_GEN) begin
        bitCnterReg <= 4'h0;
        outDataReg <= ~io_i_tx_trig & outDataReg;
      end
      else begin
        automatic logic [7:0] _GEN_5;
        _GEN_5 = {4'h0, bitCnterReg};
        if (_GEN_0) begin
          if (~_GEN_1) begin
            automatic logic [7:0] _outDataReg_T;
            bitCnterReg <= bitCnterReg + 4'h1;
            _outDataReg_T = inDataReg >> _GEN_5;
            outDataReg <= _outDataReg_T[0];
          end
        end
        else if (~_GEN_2 | _GEN_1) begin
        end
        else begin
          automatic logic [7:0] _outDataReg_T_2;
          if (bitCnterReg[3])
            bitCnterReg <= 4'h0;
          else
            bitCnterReg <= bitCnterReg + 4'h1;
          _outDataReg_T_2 = inDataReg >> _GEN_5;
          outDataReg <= bitCnterReg[3] | _outDataReg_T_2[0];
        end
      end
      if (_GEN & io_i_tx_trig)
        inDataReg <= io_i_data;
      outTxBusyReg <= |stateReg;
      outTxDoneReg <= ~_GEN & (~(_GEN_0 | _GEN_2) & (&stateReg) & ~_GEN_1 | outTxDoneReg);
      _GEN_4 =
        {{{2{_GEN_1}}},
         {{1'h1, ~(_GEN_1 | ~(bitCnterReg[3]))}},
         {_GEN_1 ? 2'h1 : 2'h2},
         {{1'h0, io_i_tx_trig}}};
      stateReg <= _GEN_4[stateReg];
    end
  end // always @(posedge)
  assign io_o_tx_busy = outTxBusyReg;
  assign io_o_tx_done = outTxDoneReg;
  assign io_o_serial_data = outDataReg;
endmodule

