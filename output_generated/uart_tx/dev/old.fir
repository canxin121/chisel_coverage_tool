FIRRTL version 3.3.0
circuit UART_tx :
  module UART_tx : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 100:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 100:7]
    input reset : UInt<1> @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 100:7]
    output io : { flip i_tx_trig : UInt<1>, flip i_data : UInt<8>, o_tx_busy : UInt<1>, o_tx_done : UInt<1>, o_serial_data : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 105:14]

    regreset clkCnterReg : UInt<8>, clock, reset, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 120:28]
    regreset bitCnterReg : UInt<4>, clock, reset, UInt<4>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 121:28]
    regreset inDataReg : UInt<8>, clock, reset, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 123:26]
    regreset outDataReg : UInt<1>, clock, reset, UInt<1>(0h1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 124:27]
    regreset outTxBusyReg : UInt<1>, clock, reset, UInt<1>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 125:29]
    regreset outTxDoneReg : UInt<1>, clock, reset, UInt<1>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 126:29]
    regreset stateReg : UInt<2>, clock, reset, UInt<2>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 127:25]
    connect io.o_serial_data, outDataReg @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 129:20]
    connect io.o_tx_busy, outTxBusyReg @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 130:16]
    connect io.o_tx_done, outTxDoneReg @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 131:16]
    node _outTxBusyReg_T = neq(stateReg, UInt<2>(0h0)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 132:28]
    connect outTxBusyReg, _outTxBusyReg_T @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 132:16]
    node _T = eq(UInt<2>(0h0), stateReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
    when _T : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
      connect outTxDoneReg, UInt<1>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 136:20]
      connect clkCnterReg, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 138:19]
      connect bitCnterReg, UInt<4>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 139:19]
      node _T_1 = eq(io.i_tx_trig, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 141:25]
      when _T_1 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 141:37]
        connect outDataReg, UInt<1>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 142:20]
        connect inDataReg, io.i_data @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 144:19]
        connect stateReg, UInt<2>(0h1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 145:18]
      else :
        connect stateReg, UInt<2>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 147:18]
    else :
      node _T_2 = eq(UInt<2>(0h1), stateReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
      when _T_2 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
        node _T_3 = lt(clkCnterReg, UInt<7>(0h56)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 151:24]
        when _T_3 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 151:40]
          node _clkCnterReg_T = add(clkCnterReg, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 152:36]
          node _clkCnterReg_T_1 = tail(_clkCnterReg_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 152:36]
          connect clkCnterReg, _clkCnterReg_T_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 152:21]
          connect stateReg, UInt<2>(0h1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 153:18]
        else :
          connect clkCnterReg, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 155:21]
          node _bitCnterReg_T = add(bitCnterReg, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 156:36]
          node _bitCnterReg_T_1 = tail(_bitCnterReg_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 156:36]
          connect bitCnterReg, _bitCnterReg_T_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 156:21]
          node _outDataReg_T = dshr(inDataReg, bitCnterReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 158:32]
          node _outDataReg_T_1 = bits(_outDataReg_T, 0, 0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 158:32]
          connect outDataReg, _outDataReg_T_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 158:20]
          connect stateReg, UInt<2>(0h2) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 159:18]
      else :
        node _T_4 = eq(UInt<2>(0h2), stateReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
        when _T_4 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
          node _T_5 = lt(clkCnterReg, UInt<7>(0h56)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 163:24]
          when _T_5 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 163:40]
            node _clkCnterReg_T_2 = add(clkCnterReg, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 164:36]
            node _clkCnterReg_T_3 = tail(_clkCnterReg_T_2, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 164:36]
            connect clkCnterReg, _clkCnterReg_T_3 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 164:21]
            connect stateReg, UInt<2>(0h2) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 165:18]
          else :
            connect clkCnterReg, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 167:21]
            node _T_6 = lt(bitCnterReg, UInt<4>(0h8)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 168:26]
            when _T_6 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 168:43]
              node _outDataReg_T_2 = dshr(inDataReg, bitCnterReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 170:34]
              node _outDataReg_T_3 = bits(_outDataReg_T_2, 0, 0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 170:34]
              connect outDataReg, _outDataReg_T_3 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 170:22]
              node _bitCnterReg_T_2 = add(bitCnterReg, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 171:38]
              node _bitCnterReg_T_3 = tail(_bitCnterReg_T_2, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 171:38]
              connect bitCnterReg, _bitCnterReg_T_3 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 171:23]
              connect stateReg, UInt<2>(0h2) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 172:20]
            else :
              connect bitCnterReg, UInt<4>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 174:23]
              connect outDataReg, UInt<1>(0h1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 176:22]
              connect stateReg, UInt<2>(0h3) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 177:20]
        else :
          node _T_7 = eq(UInt<2>(0h3), stateReg) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
          when _T_7 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 134:20]
            node _T_8 = lt(clkCnterReg, UInt<7>(0h56)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 182:24]
            when _T_8 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 182:40]
              node _clkCnterReg_T_4 = add(clkCnterReg, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 183:36]
              node _clkCnterReg_T_5 = tail(_clkCnterReg_T_4, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 183:36]
              connect clkCnterReg, _clkCnterReg_T_5 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 183:21]
              connect stateReg, UInt<2>(0h3) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 184:18]
            else :
              connect clkCnterReg, UInt<8>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 186:21]
              connect outTxDoneReg, UInt<1>(0h1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 187:22]
              connect stateReg, UInt<2>(0h0) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\modules\\Uart.scala 188:18]

