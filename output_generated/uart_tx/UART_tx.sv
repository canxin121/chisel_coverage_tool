// Generated by CIRCT firtool-1.43.0
module UART_tx(
  input        clock,
               reset,
               io_i_tx_trig,
  input  [7:0] io_i_data,
  output       io_o_tx_busy,
               io_o_tx_done,
               io_o_serial_data,
               _cp__s0,
               _cp__s1,
               _cp__s2,
               _cp__s3,
               _cp__s4,
               _cp__s5,
               _cp__s6,
               _cp__s7,
               _cp__s8,
  output [7:0] _rs__s0,
  output [3:0] _rs__s1,
  output [7:0] _rs__s2,
  output       _rs__s3,
               _rs__s4,
               _rs__s5,
  output [1:0] _rs__s6
);

  reg  [7:0] clkCnterReg;
  reg  [3:0] bitCnterReg;
  reg  [7:0] inDataReg;
  reg        outDataReg;
  reg        outTxBusyReg;
  reg        outTxDoneReg;
  reg  [1:0] stateReg;
  wire       _GEN = stateReg == 2'h1;
  wire       _GEN_0 = clkCnterReg < 8'h56;
  wire       _GEN_1 = stateReg == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 8'h0;
      bitCnterReg <= 4'h0;
      inDataReg <= 8'h0;
      outDataReg <= 1'h1;
      outTxBusyReg <= 1'h0;
      outTxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      if (|stateReg) begin
        automatic logic [7:0]      _GEN_2 = _GEN_0 ? clkCnterReg + 8'h1 : 8'h0;
        automatic logic [3:0]      _GEN_3;
        automatic logic [7:0]      _GEN_4 = inDataReg >> bitCnterReg;
        automatic logic [3:0][7:0] _GEN_5 = {{_GEN_2}, {_GEN_2}, {_GEN_2}, {clkCnterReg}};
        automatic logic [3:0][1:0] _GEN_6 =
          {{{2{_GEN_0}}},
           {{1'h1, ~(_GEN_0 | ~(bitCnterReg[3]))}},
           {_GEN_0 ? 2'h1 : 2'h2},
           {stateReg}};
        _GEN_3 = bitCnterReg + 4'h1;
        clkCnterReg <= _GEN_5[stateReg];
        if (_GEN) begin
          if (~_GEN_0) begin
            bitCnterReg <= _GEN_3;
            outDataReg <= _GEN_4[0];
          end
        end
        else if (~_GEN_1 | _GEN_0) begin
        end
        else begin
          if (bitCnterReg[3])
            bitCnterReg <= 4'h0;
          else
            bitCnterReg <= _GEN_3;
          outDataReg <= bitCnterReg[3] | _GEN_4[0];
        end
        stateReg <= _GEN_6[stateReg];
      end
      else begin
        clkCnterReg <= 8'h0;
        bitCnterReg <= 4'h0;
        outDataReg <= ~io_i_tx_trig & outDataReg;
        stateReg <= {1'h0, io_i_tx_trig};
      end
      if (~(|stateReg) & io_i_tx_trig)
        inDataReg <= io_i_data;
      outTxBusyReg <= |stateReg;
      outTxDoneReg <=
        (|stateReg) & (~(_GEN | _GEN_1) & (&stateReg) & ~_GEN_0 | outTxDoneReg);
    end
  end // always @(posedge)
  assign io_o_tx_busy = outTxBusyReg;
  assign io_o_tx_done = outTxDoneReg;
  assign io_o_serial_data = outDataReg;
  assign _cp__s0 = ~(|stateReg);
  assign _cp__s1 = io_i_tx_trig;
  assign _cp__s2 = _GEN;
  assign _cp__s3 = _GEN_0;
  assign _cp__s4 = _GEN_1;
  assign _cp__s5 = _GEN_0;
  assign _cp__s6 = ~(bitCnterReg[3]);
  assign _cp__s7 = &stateReg;
  assign _cp__s8 = _GEN_0;
  assign _rs__s0 = clkCnterReg;
  assign _rs__s1 = bitCnterReg;
  assign _rs__s2 = inDataReg;
  assign _rs__s3 = outDataReg;
  assign _rs__s4 = outTxBusyReg;
  assign _rs__s5 = outTxDoneReg;
  assign _rs__s6 = stateReg;
endmodule

