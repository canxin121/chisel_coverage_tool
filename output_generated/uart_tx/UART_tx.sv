// Generated by CIRCT firtool-1.51.0
module UART_tx(
  input        clock,
               reset,
               io_i_tx_trig,
  input  [7:0] io_i_data,
  output       io_o_tx_busy,
               io_o_tx_done,
               io_o_serial_data,
               _cond_pred_UART_tx__M__UART_tx__S___T,
               _cond_pred_UART_tx__M__UART_tx__S___T_1,
               _cond_pred_UART_tx__M__UART_tx__S___T_2,
               _cond_pred_UART_tx__M__UART_tx__S___T_3,
               _cond_pred_UART_tx__M__UART_tx__S___T_4,
               _cond_pred_UART_tx__M__UART_tx__S___T_5,
               _cond_pred_UART_tx__M__UART_tx__S___T_6,
               _cond_pred_UART_tx__M__UART_tx__S___T_7,
               _cond_pred_UART_tx__M__UART_tx__S___T_8,
  output [3:0] _reg_signals_UART_tx__M__UART_tx__S__bitCnterReg,
  output [7:0] _reg_signals_UART_tx__M__UART_tx__S__clkCnterReg,
               _reg_signals_UART_tx__M__UART_tx__S__inDataReg,
  output       _reg_signals_UART_tx__M__UART_tx__S__outDataReg,
               _reg_signals_UART_tx__M__UART_tx__S__outTxBusyReg,
               _reg_signals_UART_tx__M__UART_tx__S__outTxDoneReg,
  output [1:0] _reg_signals_UART_tx__M__UART_tx__S__stateReg
);

  reg  [7:0] clkCnterReg;
  reg  [3:0] bitCnterReg;
  reg  [7:0] inDataReg;
  reg        outDataReg;
  reg        outTxBusyReg;
  reg        outTxDoneReg;
  reg  [1:0] stateReg;
  wire       _GEN = stateReg == 2'h0;
  wire       _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_2 = stateReg == 2'h1;
  wire       _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 = clkCnterReg < 8'h56;
  wire       _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_4 = stateReg == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      clkCnterReg <= 8'h0;
      bitCnterReg <= 4'h0;
      inDataReg <= 8'h0;
      outDataReg <= 1'h1;
      outTxBusyReg <= 1'h0;
      outTxDoneReg <= 1'h0;
      stateReg <= 2'h0;
    end
    else begin
      automatic logic [3:0][7:0] _GEN_0 =
        {{_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 ? clkCnterReg + 8'h1 : 8'h0},
         {_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 ? clkCnterReg + 8'h1 : 8'h0},
         {_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 ? clkCnterReg + 8'h1 : 8'h0},
         {8'h0}};
      automatic logic [3:0][1:0] _GEN_1 =
        {{{2{_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5}}},
         {{1'h1,
           ~(_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 | ~(bitCnterReg[3]))}},
         {_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 ? 2'h1 : 2'h2},
         {{1'h0, io_i_tx_trig}}};
      clkCnterReg <= _GEN_0[stateReg];
      if (_GEN) begin
        bitCnterReg <= 4'h0;
        outDataReg <= ~io_i_tx_trig & outDataReg;
      end
      else begin
        automatic logic [7:0] _GEN_2;
        _GEN_2 = {4'h0, bitCnterReg};
        if (_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_2) begin
          if (~_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5) begin
            automatic logic [7:0] _outDataReg_T;
            bitCnterReg <= bitCnterReg + 4'h1;
            _outDataReg_T = inDataReg >> _GEN_2;
            outDataReg <= _outDataReg_T[0];
          end
        end
        else if (~_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_4
                 | _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5) begin
        end
        else begin
          automatic logic [7:0] _outDataReg_T_2;
          if (bitCnterReg[3])
            bitCnterReg <= 4'h0;
          else
            bitCnterReg <= bitCnterReg + 4'h1;
          _outDataReg_T_2 = inDataReg >> _GEN_2;
          outDataReg <= bitCnterReg[3] | _outDataReg_T_2[0];
        end
      end
      if (_GEN & io_i_tx_trig)
        inDataReg <= io_i_data;
      outTxBusyReg <= |stateReg;
      outTxDoneReg <=
        ~_GEN
        & (~(_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_2
             | _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_4) & (&stateReg)
           & ~_cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5 | outTxDoneReg);
      stateReg <= _GEN_1[stateReg];
    end
  end // always @(posedge)
  assign io_o_tx_busy = outTxBusyReg;
  assign io_o_tx_done = outTxDoneReg;
  assign io_o_serial_data = outDataReg;
  assign _cond_pred_UART_tx__M__UART_tx__S___T = _GEN;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_1 = io_i_tx_trig;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_2 =
    _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_2;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_3 =
    _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_4 =
    _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_4;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_5 =
    _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_6 = ~(bitCnterReg[3]);
  assign _cond_pred_UART_tx__M__UART_tx__S___T_7 = &stateReg;
  assign _cond_pred_UART_tx__M__UART_tx__S___T_8 =
    _cond_pred_prop_wire_UART_tx__M__UART_tx__S___T_5;
  assign _reg_signals_UART_tx__M__UART_tx__S__bitCnterReg = bitCnterReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__clkCnterReg = clkCnterReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__inDataReg = inDataReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__outDataReg = outDataReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__outTxBusyReg = outTxBusyReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__outTxDoneReg = outTxDoneReg;
  assign _reg_signals_UART_tx__M__UART_tx__S__stateReg = stateReg;
endmodule

