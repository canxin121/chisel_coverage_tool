// Generated by CIRCT firtool-1.62.1
module SimpleFsm(
  input        clock,
               reset,
               io_start,
  input  [7:0] io_dataIn,
  output       io_busy,
  output [7:0] io_dataOut,
  output       io_done
);

  reg  [1:0] currentState;
  reg  [3:0] counter;
  wire       _GEN = currentState == 2'h0;
  wire       _GEN_0 = currentState == 2'h1;
  always @(posedge clock) begin
    if (reset) begin
      currentState <= 2'h0;
      counter <= 4'h0;
    end
    else begin
      automatic logic            _GEN_1;
      automatic logic [3:0][1:0] _GEN_2;
      _GEN_1 = counter < 4'h5;
      _GEN_2 =
        {{currentState},
         {2'h0},
         {_GEN_1 ? 2'h1 : 2'h2},
         {io_start ? 2'h1 : currentState}};
      currentState <= _GEN_2[currentState];
      if (_GEN) begin
        if (io_start)
          counter <= 4'h0;
      end
      else if (_GEN_0) begin
        if (_GEN_1)
          counter <= counter + 4'h1;
        else
          counter <= 4'h0;
      end
    end
  end // always @(posedge)
  assign io_busy = |currentState;
  assign io_dataOut = 8'h0;
  assign io_done = ~(_GEN | _GEN_0) & currentState == 2'h2;
endmodule

