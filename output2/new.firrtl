FIRRTL version 3.3.0
circuit TopModule :
  module InnerModule : 
    input clock : Clock 
    input reset : Reset 
    output io : { flip sel : UInt<1>, flip inputA : UInt<8>, flip inputB : UInt<8>, innerOut : UInt<8>} 
    output _mux_cond : { topInst__I__mid__I__inner__I__local__I__io__S__sel : UInt<1>} 

    connect io.innerOut, UInt<1>(0h0) 
    node _io_innerOut_T = mux(io.sel, io.inputB, io.inputA) 
    connect io.innerOut, _io_innerOut_T 
    connect _mux_cond.topInst__I__mid__I__inner__I__local__I__io__S__sel, io.sel

  module MidLevelModule : 
    input clock : Clock 
    input reset : Reset 
    output io : { flip midSel1 : UInt<1>, flip midSel2 : UInt<1>, flip midInA : UInt<8>, flip midInB : UInt<8>, flip midInC : UInt<8>, flip midInD : UInt<8>, midOut : UInt<8>} 
    output _mux_cond : { topInst__I__mid__I__inner__I__local__I__io__S__sel : UInt<1>, topInst__I__mid__I__local__I__io__S__midSel1 : UInt<1>, topInst__I__mid__I__local__I__io__S__midSel2 : UInt<1>} 

    connect io.midOut, UInt<1>(0h0) 
    inst inner of InnerModule 
    connect inner.clock, clock
    connect inner.reset, reset
    connect inner.io.sel, io.midSel2 
    connect inner.io.inputA, io.midInC 
    connect inner.io.inputB, io.midInD 
    node _io_midOut_T = mux(io.midSel2, io.midInB, io.midInA) 
    node _io_midOut_T_1 = mux(io.midSel1, inner.io.innerOut, _io_midOut_T) 
    connect io.midOut, _io_midOut_T_1 
    connect _mux_cond.topInst__I__mid__I__inner__I__local__I__io__S__sel, inner._mux_cond.topInst__I__mid__I__inner__I__local__I__io__S__sel
    connect _mux_cond.topInst__I__mid__I__local__I__io__S__midSel1, io.midSel1
    connect _mux_cond.topInst__I__mid__I__local__I__io__S__midSel2, io.midSel2

  module TopModule : 
    input clock : Clock 
    input reset : UInt<1> 
    output io : { flip topSel1 : UInt<2>, flip topSel2 : UInt<2>, flip topSel3 : UInt<1>, flip dataIn1 : UInt<8>, flip dataIn2 : UInt<8>, flip dataIn3 : UInt<8>, flip dataIn4 : UInt<8>, flip dataIn5 : UInt<8>, flip dataIn6 : UInt<8>, finalOut : UInt<8>} 
    output _mux_cond : { topInst__I__local__I___io_finalOut_T : UInt<1>, topInst__I__local__I___io_finalOut_switchResult_T : UInt<1>, topInst__I__local__I___io_finalOut_switchResult_T_2 : UInt<1>, topInst__I__local__I__io__S__topSel3 : UInt<1>, topInst__I__mid__I__inner__I__local__I__io__S__sel : UInt<1>, topInst__I__mid__I__local__I__io__S__midSel1 : UInt<1>, topInst__I__mid__I__local__I__io__S__midSel2 : UInt<1>} 

    wire _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T : UInt<1>
    wire _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T_2 : UInt<1>
    connect _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T, UInt<1>(0h0)
    connect _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T_2, UInt<1>(0h0)
    connect io.finalOut, UInt<8>(0h0) 
    inst mid of MidLevelModule 
    connect mid.clock, clock
    connect mid.reset, reset
    node _mid_io_midSel1_T = bits(io.topSel1, 0, 0) 
    connect mid.io.midSel1, _mid_io_midSel1_T 
    connect mid.io.midSel2, io.topSel3 
    connect mid.io.midInA, io.dataIn1 
    connect mid.io.midInB, io.dataIn2 
    connect mid.io.midInC, io.dataIn3 
    connect mid.io.midInD, io.dataIn4 
    node _io_finalOut_T = bits(io.topSel1, 1, 1) 
    wire io_finalOut_switchResult : UInt<8> 
    connect io_finalOut_switchResult, UInt<8>(0h0) 
    node _io_finalOut_T_1 = eq(UInt<1>(0h0), io.topSel2) 
    when _io_finalOut_T_1 : 
      node _io_finalOut_T_2 = eq(UInt<1>(0h0), io.topSel3) 
      when _io_finalOut_T_2 : 
        connect io_finalOut_switchResult, io.dataIn1 
      else :
        node _io_finalOut_T_3 = eq(UInt<1>(0h1), io.topSel3) 
        when _io_finalOut_T_3 : 
          connect io_finalOut_switchResult, io.dataIn2 
    else :
      node _io_finalOut_T_4 = eq(UInt<1>(0h1), io.topSel2) 
      when _io_finalOut_T_4 : 
        wire io_finalOut_temp : UInt<1> 
        connect io_finalOut_temp, io.topSel3 
        node _io_finalOut_switchResult_T = eq(io_finalOut_temp, UInt<1>(0h0)) 
        connect _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T, _io_finalOut_switchResult_T 
        node _io_finalOut_switchResult_T_1 = mux(_io_finalOut_switchResult_T, io.dataIn4, io.dataIn3) 
        connect io_finalOut_switchResult, _io_finalOut_switchResult_T_1 
      else :
        node _io_finalOut_T_5 = eq(UInt<2>(0h2), io.topSel2) 
        when _io_finalOut_T_5 : 
          node _io_finalOut_switchResult_T_2 = bits(io.topSel1, 0, 0) 
          connect _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T_2, _io_finalOut_switchResult_T_2 
          node _io_finalOut_switchResult_T_3 = mux(_io_finalOut_switchResult_T_2, io.dataIn6, io.dataIn5) 
          node _io_finalOut_switchResult_T_4 = mux(io.topSel3, _io_finalOut_switchResult_T_3, io.dataIn1) 
          connect io_finalOut_switchResult, _io_finalOut_switchResult_T_4 
    node _io_finalOut_T_6 = mux(_io_finalOut_T, mid.io.midOut, io_finalOut_switchResult) 
    connect io.finalOut, _io_finalOut_T_6 
    connect _mux_cond.topInst__I__local__I___io_finalOut_T, _io_finalOut_T
    connect _mux_cond.topInst__I__local__I___io_finalOut_switchResult_T, _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T
    connect _mux_cond.topInst__I__local__I___io_finalOut_switchResult_T_2, _mux_cond_prop_wire_topInst__I__local__I___io_finalOut_switchResult_T_2
    connect _mux_cond.topInst__I__local__I__io__S__topSel3, io.topSel3
    connect _mux_cond.topInst__I__mid__I__inner__I__local__I__io__S__sel, mid._mux_cond.topInst__I__mid__I__inner__I__local__I__io__S__sel
    connect _mux_cond.topInst__I__mid__I__local__I__io__S__midSel1, mid._mux_cond.topInst__I__mid__I__local__I__io__S__midSel1
    connect _mux_cond.topInst__I__mid__I__local__I__io__S__midSel2, mid._mux_cond.topInst__I__mid__I__local__I__io__S__midSel2
