// Generated by CIRCT firtool-1.62.1
module TopModule (
    input         clock,
    reset,
    input  [31:0] io_inA,
    io_inB,
    io_inC,
    io_inD,
    io_inE,
    io_inF,
    input         io_sel1,
    io_sel2,
    io_sel3,
    output [31:0] io_out,
    output        _mux_cond_topInst__midMod__local__io_sel2,
    _mux_cond_topInst__midMod__lowMod1__local__io_sel,
    _mux_cond_topInst__midMod__local__io_sel1,
    _mux_cond_topInst__local__io_sel1,
    _mux_cond_topInst__local__io_sel2,
    _mux_cond_topInst__local__io_sel3,
    _mux_cond_topInst__midMod__lowMod2__local__io_sel
);

  wire [31:0] _midMod_io_out;
  wire [31:0] topMux1 = io_sel1 ? io_inA : io_inB;
  wire [31:0] topMux2 = io_sel1 ? io_inC : io_inD;
  MidModule midMod (
      .io_inA(topMux1),
      .io_inB(topMux2),
      .io_inC(io_inE),
      .io_inD(io_inF),
      .io_sel1(io_sel2),
      .io_sel2(io_sel3),
      .io_out(_midMod_io_out),
      ._mux_cond_topInst__midMod__local__io_sel2(_mux_cond_topInst__local__io_sel2),
      ._mux_cond_topInst__midMod__lowMod1__local__io_sel(_mux_cond_topInst__local__io_sel3),
      ._mux_cond_topInst__midMod__local__io_sel1(_mux_cond_topInst__midMod__lowMod2__local__io_sel)
  );
  assign io_out = io_sel3 ? _midMod_io_out : io_sel2 ? topMux1 : topMux2;
  assign _mux_cond_topInst__midMod__local__io_sel2 = io_sel1;
  assign _mux_cond_topInst__midMod__lowMod1__local__io_sel = io_sel1;
  assign _mux_cond_topInst__midMod__local__io_sel1 = io_sel2;
  assign _mux_cond_topInst__local__io_sel1 = io_sel3;
endmodule

module MidModule (
    input  [31:0] io_inA,
    io_inB,
    io_inC,
    io_inD,
    input         io_sel1,
    io_sel2,
    output [31:0] io_out,
    output        _mux_cond_topInst__midMod__local__io_sel2,
    _mux_cond_topInst__midMod__lowMod1__local__io_sel,
    _mux_cond_topInst__midMod__local__io_sel1
);

  wire [31:0] _lowMod2_io_out;
  wire [31:0] _lowMod1_io_out;
  LowModule lowMod1 (
      .io_inA(io_sel1 ? io_inA : io_inB),
      .io_inB(io_sel1 ? io_inC : io_inD),
      .io_sel(io_sel2),
      .io_out(_lowMod1_io_out)
  );
  LowModule lowMod2 (
      .io_inA(io_inA),
      .io_inB(io_inB),
      .io_sel(io_sel1),
      .io_out(_lowMod2_io_out)
  );
  assign io_out = io_sel2 ? _lowMod1_io_out : _lowMod2_io_out;
  assign _mux_cond_topInst__midMod__local__io_sel2 = io_sel1;
  assign _mux_cond_topInst__midMod__lowMod1__local__io_sel = io_sel1;
  assign _mux_cond_topInst__midMod__local__io_sel1 = io_sel2;
endmodule

module LowModule (
    input  [31:0] io_inA,
    io_inB,
    input         io_sel,
    output [31:0] io_out
);

  assign io_out = (io_sel ? io_inA : io_inB) + 32'h1;
endmodule

