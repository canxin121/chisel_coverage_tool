FIRRTL version 3.3.0
circuit TopModule :
  module LowModule : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    input reset : Reset @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    output io : { flip inA : UInt<32>, flip inB : UInt<32>, flip sel : UInt<1>, out : UInt<32>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 7:14]
    output _mux_cond : { topInst__midMod__lowMod1__local__io_sel : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]

    node internalMux = mux(io.sel, io.inA, io.inB) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 15:24]
    node _processed_T = add(internalMux, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 18:31]
    node processed = tail(_processed_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 18:31]
    connect io.out, processed @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 20:10]
    connect _mux_cond.topInst__midMod__lowMod1__local__io_sel, io.sel

  module LowModule_1 : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    input reset : Reset @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]
    output io : { flip inA : UInt<32>, flip inB : UInt<32>, flip sel : UInt<1>, out : UInt<32>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 7:14]
    output _mux_cond : { topInst__midMod__lowMod2__local__io_sel : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 6:7]

    node internalMux = mux(io.sel, io.inA, io.inB) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 15:24]
    node _processed_T = add(internalMux, UInt<1>(0h1)) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 18:31]
    node processed = tail(_processed_T, 1) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 18:31]
    connect io.out, processed @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 20:10]
    connect _mux_cond.topInst__midMod__lowMod2__local__io_sel, io.sel

  module MidModule : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 24:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 24:7]
    input reset : Reset @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 24:7]
    output io : { flip inA : UInt<32>, flip inB : UInt<32>, flip inC : UInt<32>, flip inD : UInt<32>, flip sel1 : UInt<1>, flip sel2 : UInt<1>, out : UInt<32>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 25:14]
    output _mux_cond : { topInst__midMod__local__io_sel1 : UInt<1>, topInst__midMod__local__io_sel2 : UInt<1>, topInst__midMod__lowMod1__local__io_sel : UInt<1>, topInst__midMod__lowMod2__local__io_sel : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 24:7]

    inst lowMod1 of LowModule @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 36:23]
    connect lowMod1.clock, clock
    connect lowMod1.reset, reset
    inst lowMod2 of LowModule_1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 37:23]
    connect lowMod2.clock, clock
    connect lowMod2.reset, reset
    node mux1Out = mux(io.sel1, io.inA, io.inB) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 40:20]
    node mux2Out = mux(io.sel1, io.inC, io.inD) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 41:20]
    connect lowMod1.io.inA, mux1Out @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 44:18]
    connect lowMod1.io.inB, mux2Out @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 45:18]
    connect lowMod1.io.sel, io.sel2 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 46:18]
    connect lowMod2.io.inA, io.inA @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 48:18]
    connect lowMod2.io.inB, io.inB @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 49:18]
    connect lowMod2.io.sel, io.sel1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 50:18]
    node _io_out_T = mux(io.sel2, lowMod1.io.out, lowMod2.io.out) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 53:16]
    connect io.out, _io_out_T @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 53:10]
    connect _mux_cond.topInst__midMod__local__io_sel1, io.sel1
    connect _mux_cond.topInst__midMod__local__io_sel2, io.sel2
    connect _mux_cond.topInst__midMod__lowMod1__local__io_sel, lowMod1._mux_cond.topInst__midMod__lowMod1__local__io_sel
    connect _mux_cond.topInst__midMod__lowMod2__local__io_sel, lowMod2._mux_cond.topInst__midMod__lowMod2__local__io_sel

  module TopModule : @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 57:7]
    input clock : Clock @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 57:7]
    input reset : UInt<1> @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 57:7]
    output io : { flip inA : UInt<32>, flip inB : UInt<32>, flip inC : UInt<32>, flip inD : UInt<32>, flip inE : UInt<32>, flip inF : UInt<32>, flip sel1 : UInt<1>, flip sel2 : UInt<1>, flip sel3 : UInt<1>, out : UInt<32>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 58:14]
    output _mux_cond : { topInst__local__io_sel1 : UInt<1>, topInst__local__io_sel2 : UInt<1>, topInst__local__io_sel3 : UInt<1>, topInst__midMod__local__io_sel1 : UInt<1>, topInst__midMod__local__io_sel2 : UInt<1>, topInst__midMod__lowMod1__local__io_sel : UInt<1>, topInst__midMod__lowMod2__local__io_sel : UInt<1>} @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 57:7]

    inst midMod of MidModule @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 72:22]
    connect midMod.clock, clock
    connect midMod.reset, reset
    node topMux1 = mux(io.sel1, io.inA, io.inB) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 75:20]
    node topMux2 = mux(io.sel1, io.inC, io.inD) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 76:20]
    node topMux3 = mux(io.sel2, topMux1, topMux2) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 77:20]
    connect midMod.io.inA, topMux1 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 80:17]
    connect midMod.io.inB, topMux2 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 81:17]
    connect midMod.io.inC, io.inE @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 82:17]
    connect midMod.io.inD, io.inF @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 83:17]
    connect midMod.io.sel1, io.sel2 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 84:18]
    connect midMod.io.sel2, io.sel3 @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 85:18]
    node _io_out_T = mux(io.sel3, midMod.io.out, topMux3) @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 88:16]
    connect io.out, _io_out_T @[D:\\projs\\fuzz\\learn_chisel_phase\\src\\main\\scala\\ExampleModule1.scala 88:10]
    connect _mux_cond.topInst__local__io_sel1, io.sel1
    connect _mux_cond.topInst__local__io_sel2, io.sel2
    connect _mux_cond.topInst__local__io_sel3, io.sel3
    connect _mux_cond.topInst__midMod__local__io_sel1, midMod._mux_cond.topInst__midMod__local__io_sel1
    connect _mux_cond.topInst__midMod__local__io_sel2, midMod._mux_cond.topInst__midMod__local__io_sel2
    connect _mux_cond.topInst__midMod__lowMod1__local__io_sel, midMod._mux_cond.topInst__midMod__lowMod1__local__io_sel
    connect _mux_cond.topInst__midMod__lowMod2__local__io_sel, midMod._mux_cond.topInst__midMod__lowMod2__local__io_sel
